// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// saBivariateBD
NumericMatrix saBivariateBD(int J, double alphaR, double alphaT, double beta, int Nmin, int Nmax, int equal_n, Rcpp::List dbivar_00_list, Rcpp::List dbivar_01_list, Rcpp::List dbivar_10_list, Rcpp::List dbivar_11_min_list, Rcpp::List dbivar_11_max_list, int summary);
RcppExport SEXP _singlearm_saBivariateBD(SEXP JSEXP, SEXP alphaRSEXP, SEXP alphaTSEXP, SEXP betaSEXP, SEXP NminSEXP, SEXP NmaxSEXP, SEXP equal_nSEXP, SEXP dbivar_00_listSEXP, SEXP dbivar_01_listSEXP, SEXP dbivar_10_listSEXP, SEXP dbivar_11_min_listSEXP, SEXP dbivar_11_max_listSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type alphaR(alphaRSEXP);
    Rcpp::traits::input_parameter< double >::type alphaT(alphaTSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type Nmin(NminSEXP);
    Rcpp::traits::input_parameter< int >::type Nmax(NmaxSEXP);
    Rcpp::traits::input_parameter< int >::type equal_n(equal_nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_00_list(dbivar_00_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_01_list(dbivar_01_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_10_list(dbivar_10_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_11_min_list(dbivar_11_min_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_11_max_list(dbivar_11_max_listSEXP);
    Rcpp::traits::input_parameter< int >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(saBivariateBD(J, alphaR, alphaT, beta, Nmin, Nmax, equal_n, dbivar_00_list, dbivar_01_list, dbivar_10_list, dbivar_11_min_list, dbivar_11_max_list, summary));
    return rcpp_result_gen;
END_RCPP
}
// saBivariateCP
NumericMatrix saBivariateCP(int J, double alphaL, double alphaG, double beta, int Nmin, int Nmax, int equal_n, Rcpp::List dbivar_00_list, Rcpp::List dbivar_01_list, Rcpp::List dbivar_10_list, Rcpp::List dbivar_11_list, Rcpp::List dbivar_max1_list, Rcpp::List dbivar_max2_list, int summary);
RcppExport SEXP _singlearm_saBivariateCP(SEXP JSEXP, SEXP alphaLSEXP, SEXP alphaGSEXP, SEXP betaSEXP, SEXP NminSEXP, SEXP NmaxSEXP, SEXP equal_nSEXP, SEXP dbivar_00_listSEXP, SEXP dbivar_01_listSEXP, SEXP dbivar_10_listSEXP, SEXP dbivar_11_listSEXP, SEXP dbivar_max1_listSEXP, SEXP dbivar_max2_listSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type alphaL(alphaLSEXP);
    Rcpp::traits::input_parameter< double >::type alphaG(alphaGSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type Nmin(NminSEXP);
    Rcpp::traits::input_parameter< int >::type Nmax(NmaxSEXP);
    Rcpp::traits::input_parameter< int >::type equal_n(equal_nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_00_list(dbivar_00_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_01_list(dbivar_01_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_10_list(dbivar_10_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_11_list(dbivar_11_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_max1_list(dbivar_max1_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dbivar_max2_list(dbivar_max2_listSEXP);
    Rcpp::traits::input_parameter< int >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(saBivariateCP(J, alphaL, alphaG, beta, Nmin, Nmax, equal_n, dbivar_00_list, dbivar_01_list, dbivar_10_list, dbivar_11_list, dbivar_max1_list, dbivar_max2_list, summary));
    return rcpp_result_gen;
END_RCPP
}
// saGS
NumericMatrix saGS(int J, double pi0, double pi1, double alpha, double beta, int Nmin, int Nmax, int futility, int efficacy, int equal_n, int ensign, int summary);
RcppExport SEXP _singlearm_saGS(SEXP JSEXP, SEXP pi0SEXP, SEXP pi1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP NminSEXP, SEXP NmaxSEXP, SEXP futilitySEXP, SEXP efficacySEXP, SEXP equal_nSEXP, SEXP ensignSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type Nmin(NminSEXP);
    Rcpp::traits::input_parameter< int >::type Nmax(NmaxSEXP);
    Rcpp::traits::input_parameter< int >::type futility(futilitySEXP);
    Rcpp::traits::input_parameter< int >::type efficacy(efficacySEXP);
    Rcpp::traits::input_parameter< int >::type equal_n(equal_nSEXP);
    Rcpp::traits::input_parameter< int >::type ensign(ensignSEXP);
    Rcpp::traits::input_parameter< int >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(saGS(J, pi0, pi1, alpha, beta, Nmin, Nmax, futility, efficacy, equal_n, ensign, summary));
    return rcpp_result_gen;
END_RCPP
}
// saVariable
NumericMatrix saVariable(int J, double pi0, double pi1, double alpha, double beta, int v, int Nmin, int Nmax, int equal_n);
RcppExport SEXP _singlearm_saVariable(SEXP JSEXP, SEXP pi0SEXP, SEXP pi1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP vSEXP, SEXP NminSEXP, SEXP NmaxSEXP, SEXP equal_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type Nmin(NminSEXP);
    Rcpp::traits::input_parameter< int >::type Nmax(NmaxSEXP);
    Rcpp::traits::input_parameter< int >::type equal_n(equal_nSEXP);
    rcpp_result_gen = Rcpp::wrap(saVariable(J, pi0, pi1, alpha, beta, v, Nmin, Nmax, equal_n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_singlearm_saBivariateBD", (DL_FUNC) &_singlearm_saBivariateBD, 13},
    {"_singlearm_saBivariateCP", (DL_FUNC) &_singlearm_saBivariateCP, 14},
    {"_singlearm_saGS", (DL_FUNC) &_singlearm_saGS, 12},
    {"_singlearm_saVariable", (DL_FUNC) &_singlearm_saVariable, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_singlearm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
